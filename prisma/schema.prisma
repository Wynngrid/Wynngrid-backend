generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  otp           String?
  otpExpiry     DateTime?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  projects      Project[]
  userType      String    @default("normal")
  projectAverages ProjectAverage[]
}

model Profile {
  id                      String    @id @default(uuid())
  userId                  String    @unique
  user                    User      @relation(fields: [userId], references: [id])
  fullName                String?
  preferredWorkLocations  String[]  // New required field
  businessName            String?
  contactNumber           String
  city                    String
  serviceProviderType     String
  experienceYears         String
  graduationInfo          String
  associations            String?
  portfolioUrls           String[]
  professionalBannerImages String[]  @default([])
  websiteUrl              String?
  workSetupPreference     String
  aboutUs                 String?
  comments                String?
  profilePicUrl           String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  preferredTimeline      String?
  projectAverages        ProjectAverage[]
}

model Project {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  name            String
  location        String
  area            Float
  jobCost         Float
  projectType     String
  description     String?
  images          String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Contact {
  id              String    @id @default(uuid())
  purpose         String    // Query, Feedback, Support, Business
  firstName       String
  lastName        String
  phoneNumber     String
  email           String    // Adding email field
  message         String
  requireCallback Boolean   @default(false)
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
}

model ProjectAverage {
  id              String   @id @default(uuid())
  profileId       String
  profile         Profile  @relation(fields: [profileId], references: [id])
  projectType     String
  avgArea         String
  avgValue        String
  specializations String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  user            User      @relation(fields: [userId], references: [id])
}

model NotificationSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  status    String   // PENDING, NOTIFIED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}